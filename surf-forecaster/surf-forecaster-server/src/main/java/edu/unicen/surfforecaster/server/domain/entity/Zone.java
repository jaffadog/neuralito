/**
 * 
 */
package edu.unicen.surfforecaster.server.domain.entity;

import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.Validate;

/**
 * A zone its a geographic area inside a country.
 * 
 * @author esteban
 * 
 */
@Entity
public class Zone {
	/**
	 * Entity autogenerated id.
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;
	private String name;
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	private Set<Spot> spots;

	/**
	 * 
	 */
	public Zone() {
		// TODO Auto-generated constructor stub
	}

	/**
	 * Creates a new Zone.
	 */
	public Zone(String name) {
		Validate.notEmpty(name, "The zone name cannot be null");
		this.name = name;
		this.spots = new HashSet<Spot>();
	}

	/**
	 * Sets the area id.
	 * 
	 * @param id
	 */
	public void setId(Integer id) {
		this.id = id;
	}

	/**
	 * @return the id
	 */
	public Integer getId() {
		return this.id;
	}

	public String getName() {
		return name;
	}

	public Set<Spot> getSpots() {
		return Collections.unmodifiableSet(spots);
	}

	public void addSpot(Spot theSpot) {
		Validate.notNull(theSpot, "The spot to be added cannot be null");
		this.spots.add(theSpot);
	}

	public void removeSpot(Spot theSpot) {
		Validate.notNull(theSpot, "The spot to be removed cannot be null");
		spots.remove(theSpot);
	}
}
