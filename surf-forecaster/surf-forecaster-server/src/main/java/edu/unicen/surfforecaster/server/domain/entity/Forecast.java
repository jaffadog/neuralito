/**
 * 
 */
package edu.unicen.surfforecaster.server.domain.entity;

import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.MapKey;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;

import org.apache.commons.lang.Validate;

import edu.unicen.surfforecaster.common.services.dto.ForecastAttributeDTO;
import edu.unicen.surfforecaster.common.services.dto.ForecastDTO;

/**
 * @author esteban
 * 
 */
@Entity
public class Forecast {
	/**
	 * Entity autogenerated id.
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;
	/**
	 * The base date of this forecast.This is the date the forecast was made.
	 */
	private Date issuedDate;
	/**
	 * The time ahead base date to which this forecast applies. This corresponds to Hours since
	 * the baseDate.
	 */
	private Integer forecastTime;

	/**
	 * Map with <parameterName, parameterValue> info. Parameters may be:
	 * waveHeight, wavePeriod, waveDirection, windSpeed.
	 */
	@OneToMany(cascade = CascadeType.ALL)
	@MapKey(name = "parameterName")
	private Map<String, Value> parameters;

	/**
	 * The location this forecast belongs.
	 */
	@OneToOne(cascade = CascadeType.ALL)
	private Point point;

	/**
	 * Default Constructor.
	 */
	public Forecast() {
		// ORM purpose.
	}

	/**
	 * @param baseDate
	 * @param runDate
	 * @param forecastDate
	 * @param parameters
	 * @param point2
	 * @param ww3Forecaster
	 */
	public Forecast(final Date baseDate, final Integer forecastTime,
			final Point point2, final Map<String, Value> parameters) {
		Validate.notNull(baseDate);
		Validate.notNull(parameters);
		issuedDate = baseDate;
		this.forecastTime = forecastTime;
		this.parameters = parameters;
		point = point2;
	}

	/**
	 * @return the id
	 */
	public Integer getId() {
		return id;
	}

	/**
	 * @return the attributes this forecast has.
	 */
	public Value getParameter(final String parameterName) {
		return parameters.get(parameterName);
	}

	/**
	 * @return the baseDate
	 */
	public Date getBaseDate() {
		return issuedDate;
	}

	/**
	 * @return forecastTime which is the hours ahead the baseDate for which this
	 *         forecast belongs.
	 */
	public Integer getForecastTime() {
		return forecastTime;
	}
	 public Date getForecastValidDate(){
		 long minutes = this.getForecastTime()*60;
		 long seconds = minutes*60;
		 long milliseconds = seconds*1000;
		 return new Date (this.getBaseDate().getTime()+milliseconds);
	 }
	/**
	 * @return
	 */
	public ForecastDTO getDTO(TimeZone timeZone) {
		final Collection<String> keys = parameters.keySet();
		final Map<String, ForecastAttributeDTO> map = new HashMap<String, ForecastAttributeDTO>();
		for (final Iterator iterator = keys.iterator(); iterator.hasNext();) {
			final String key = (String) iterator
					.next();
			map.put(key, parameters.get(key).getDTO());
		}
		Calendar cal = new GregorianCalendar(timeZone);
		cal.setTime(getBaseDate());
		return new ForecastDTO(cal, getForecastTime(), map);
	}

	/**
	 * @return
	 */
	public Point getPoint() {
		return point;
	}
	
	public Date getForecastDate(){
		long hoursInMillis = this.forecastTime * 60 * 60 * 1000;
		return new Date(this.issuedDate.getTime()+ hoursInMillis);
	}
	public void addParameter(String name, Value parameter){
		this.parameters.put(name, parameter);
	}

	public Set<String> getParameters() {
		return this.parameters.keySet();
	}

}
