/**
 * 
 */
package edu.unicen.surfforecaster.server.domain.entity;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;

import org.apache.commons.lang.Validate;

import edu.unicen.surfforecaster.common.services.dto.ComparationDTO;
import edu.unicen.surfforecaster.common.services.dto.SpotDTO;

/**
 * Class used to represent a comparation between several spots.
 * 
 * @author esteban
 * 
 */
@Entity
public class Comparation {
	/**
	 * Entity autogenerated id.
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;
	/**
	 * the spots to be compared.
	 */
	@ManyToMany()
	List<Spot> spots = new ArrayList<Spot>();

	@ManyToOne()
	User user;
	private String name;
	private String description;

	/**
	 * 
	 */
	public Comparation() {
	}

	/**
	 * @param comparationName
	 * @param comparationDescription
	 * @param user
	 * @param spots
	 */
	public Comparation(final String comparationName,
			final String comparationDescription, final User user,
			final List<Spot> spots2) {
		name = comparationName;
		description = comparationDescription;
		this.user = user;
		spots = spots2;
	}

	/**
	 * Add spot to the comparation list.
	 * 
	 * @param spot
	 */
	public void addSpot(final Spot spot) {
		Validate.notNull(spot);
		spots.add(spot);
	}

	/**
	 * Remove spot from the comparation list.
	 * 
	 * @param spot
	 */
	public void removeSpot(final Spot spot) {
		Validate.notNull(spot);
		spots.remove(spot);
	}

	/**
	 * @return the spots to be compared.
	 */
	public List<Spot> getSpots() {
		return Collections.unmodifiableList(spots);
	}

	/**
	 * @return the id
	 */
	public Integer getId() {
		return id;
	}

	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * @return the description
	 */
	public String getDescription() {
		return description;
	}

	/**
	 * @return the user
	 */
	public User getUser() {
		return user;
	}

	public ComparationDTO getDTO() {
		final List<SpotDTO> spotDtos = new ArrayList<SpotDTO>();
		for (final Spot spot : spots) {
			spotDtos.add(spot.getDTO(spot));
		}
		return new ComparationDTO(id, name, spotDtos, description, user.getId());
	}

	/**
	 * @param spots
	 *            the spots to set
	 */
	public void setSpots(final List<Spot> spots) {
		this.spots = spots;
	}

	/**
	 * @param description
	 *            the description to set
	 */
	public void setDescription(final String description) {
		this.description = description;
	}

}
