package edu.unicen.surfforecaster.server.domain.entity;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;

import org.apache.commons.lang.Validate;

import edu.unicen.surfforecaster.common.services.dto.Unit;

@Entity
public class VisualObservationsSet {
	/**
	 * Entity autogenerated id.
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;
	/**
	 * 
	 * The name of this visual observations set.
	 */
	private String name;
	/**
	 * The description about this set.
	 */
	private String description;

	/**
	 * The observations this set contains.
	 */
	@OneToMany(cascade = CascadeType.ALL)
	private List<VisualObservation> observations;
	/**
	 * The unit in which the observations in this set were reported.
	 */
	@Enumerated(EnumType.STRING)
	private Unit unit;
	/**
	 * The first reported date in this set.
	 */
	private Date fromDate;
	/**
	 * The last reported date in this set.
	 */
	private Date toDate;
	/**
	 * 
	 */
	protected VisualObservationsSet() {
		// For ORM purpose.
	}

	/**
	 * @return the id
	 */
	public Integer getId() {
		return id;
	}

	public VisualObservationsSet(String setName, String setDescription,
			List<VisualObservation> observations, Unit unit, Spot spot) {
		Validate.notNull(setName);
		Validate.notNull(setDescription);
		Validate.notNull(observations);
		this.name = setName;
		this.description = setDescription;
		this.observations = observations;
		setTimeRange(observations);
		this.unit = unit;
		
	}

	/**
	 * Obtain the time range of this data set.
	 * 
	 * @param observations2
	 */
	private void setTimeRange(List<VisualObservation> observations2) {
		Date maxDate = new Date(0);
		Date minDate = new Date(Long.MAX_VALUE);
		for (Iterator iterator = observations2.iterator(); iterator.hasNext();) {
			VisualObservation visualObservation = (VisualObservation) iterator
					.next();
			if (visualObservation.getObservationDate().getTime() < minDate
					.getTime())
				minDate = visualObservation.getObservationDate();
			if (visualObservation.getObservationDate().getTime() > maxDate
					.getTime())
				maxDate = visualObservation.getObservationDate();
		}
		this.fromDate = minDate;
		this.toDate = maxDate;
	}

	public String getName() {
		return name;
	}

	public Unit getUnit() {
		return unit;
	}

	public Date getFromDate() {
		return fromDate;
	}

	public Date getToDate() {
		return toDate;
	}

	public String getDescription() {
		return description;
	}

	public List<VisualObservation> getObservations() {
		return observations;
	}


}
