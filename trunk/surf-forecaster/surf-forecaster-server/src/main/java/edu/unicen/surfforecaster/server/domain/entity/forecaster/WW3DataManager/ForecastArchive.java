/**
 * 
 */
package edu.unicen.surfforecaster.server.domain.entity.forecaster.WW3DataManager;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;

import org.apache.commons.lang.Validate;

import edu.unicen.surfforecaster.server.domain.entity.forecaster.Forecast;
import edu.unicen.surfforecaster.server.domain.entity.forecaster.Point;

/**
 * An archive with past NOAA wave watch forecasts.
 * 
 * @author esteban
 * 
 */
@Entity
public class ForecastArchive {
	/**
	 * Entity autogenerated id.
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;
	/**
	 * The archive
	 */
	@OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	private final Collection<Forecast> archive = new ArrayList<Forecast>();

	/**
	 * The default constructor.
	 */
	public ForecastArchive() {
		// ORM purpose.
	}

	/**
	 * @return the id
	 */
	public Integer getId() {
		return id;
	}

	/**
	 * Add a forecast to the archive.
	 * 
	 * @param forecast
	 */
	public void add(final Forecast forecast) {
		Validate.notNull(forecast);
		archive.add(forecast);

	}

	/**
	 * Obtain the archived forecast for the given point for the specified time
	 * range.
	 * 
	 * @param from
	 * @param to
	 * @param point
	 */
	public Collection<Forecast> getArchiveForecast(final Date from,
			final Date to, final Point point) {
		Validate.notNull(from);
		Validate.notNull(to);
		Validate.notNull(point);
		final Collection<Forecast> forecasts = new ArrayList<Forecast>();
		for (final Iterator<Forecast> iterator = archive.iterator(); iterator
				.hasNext();) {
			final Forecast forecast = iterator.next();
			if (forecast.getBaseDate().getTime() > from.getTime()
					&& forecast.getBaseDate().getTime() < to.getTime()
					&& point.equals(forecast.getPoint())) {
				forecasts.add(forecast);
			}

		}
		return forecasts;
	}
}
