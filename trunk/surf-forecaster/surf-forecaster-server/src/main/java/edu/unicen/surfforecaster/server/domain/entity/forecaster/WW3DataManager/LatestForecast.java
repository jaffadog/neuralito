/**
 * 
 */
package edu.unicen.surfforecaster.server.domain.entity.forecaster.WW3DataManager;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;

import org.apache.commons.lang.Validate;

import edu.unicen.surfforecaster.server.domain.entity.forecaster.Forecast;
import edu.unicen.surfforecaster.server.domain.entity.forecaster.Point;

/**
 * The latest forecasts obtained from NOAA.
 * 
 * @author esteban
 * 
 */
@Entity
public class LatestForecast {
	/**
	 * Entity autogenerated id.
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;
	/**
	 * The latest forecast list
	 */
	@OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	private Collection<Forecast> latest = new ArrayList<Forecast>();

	/**
	 * The default constructor.
	 */
	public LatestForecast() {
		// ORM purpose.
	}

	/**
	 * @param latestForecast
	 *            the latestForecast to set
	 */
	public void setLatest(final Collection<Forecast> latestForecast) {
		Validate.notNull(latestForecast);
		latest = latestForecast;
	}

	/**
	 * @return the latestForecast
	 */
	public Collection<Forecast> getLatestForecast() {
		return latest;
	}

	/**
	 * @return the id
	 */
	public Integer getId() {
		return id;
	}

	/**
	 * @param point
	 */
	public Collection<Forecast> getLatestForecastForLocation(final Point point) {
		final Collection<Forecast> forecasts = new ArrayList<Forecast>();
		for (final Iterator<Forecast> it = latest.iterator(); it.hasNext();) {
			final Forecast forecast = it.next();
			if (forecast.getPoint().equals(point)) {
				forecasts.add(forecast);
			}

		}
		return forecasts;
	}

	/**
	 * Obtain the date of this forecasts.
	 * 
	 * @return
	 */
	public Date getForecastsDate() {
		for (final Iterator<Forecast> it = latest.iterator(); it.hasNext();) {
			final Forecast forecast = it.next();
			return forecast.getBaseDate();
		}
		return null;
	}
}
