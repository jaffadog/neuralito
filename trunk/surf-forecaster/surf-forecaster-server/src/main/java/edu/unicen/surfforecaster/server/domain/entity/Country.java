/**
 * 
 */
package edu.unicen.surfforecaster.server.domain.entity;

import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.MapKey;
import javax.persistence.OneToMany;

import org.apache.commons.lang.Validate;

import edu.unicen.surfforecaster.common.services.dto.CountryDTO;

/**
 * Represents a country which contains a set of zones.
 * 
 * @author esteban
 * 
 */
@Entity
public class Country {
	/**
	 * Entity autogenerated id.
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;

	/**
	 * the country name.
	 */
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	@MapKey(name = "language")
	private final Map<String, I18n> names = new HashMap<String, I18n>();

	/**
	 * the zones this country contains.
	 */
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "country")
	private final Set<Zone> zones = new HashSet<Zone>();

	@ManyToOne(fetch = FetchType.EAGER)
	private Area area;

	/**
	 * Empty constructor.
	 */
	public Country() {
		names.put("es", new I18n("es", "argentina"));
		// ORM purpose.
	}

	/**
	 * @param countryNamesMap
	 * @param areaId
	 */
	public Country(final Map<String, String> countryNamesMap, final Area area) {
		this.area = area;
		final Collection<Entry<String, String>> keyValues = countryNamesMap
				.entrySet();
		for (final Iterator<Entry<String, String>> iterator = keyValues
				.iterator(); iterator.hasNext();) {
			final Entry<String, String> entry = iterator.next();
			names.put(entry.getKey(),
					new I18n(entry.getKey(), entry.getValue()));

		}
	}

	/**
	 * Sets the id.
	 * 
	 * @param id
	 */
	public void setId(final Integer id) {
		this.id = id;
	}

	/**
	 * @return the id
	 */
	public Integer getId() {
		return id;
	}

	public void addZone(final Zone theZone) {
		Validate.notNull(theZone, "the zone to be added cannot be null");
		zones.add(theZone);
	}

	public void removeZone(final Zone theZone) {
		Validate.notNull(theZone, "the zone to be removed cannot be null");
		zones.remove(theZone);
	}

	/**
	 * @return the zones
	 */
	public Set<Zone> getZones() {
		return Collections.unmodifiableSet(zones);
	}

	/**
	 * Obtain the country name for the given language.
	 * 
	 * @param language
	 * @return the country name for the given language
	 */
	public String getName(final String language) {
		Validate.notNull(language);
		final I18n value = names.get(language);
		if (value != null)
			return value.getText();
		else
			return null;
	}

	/**
	 * Obtain the DTO for this instance.
	 * 
	 * @return
	 */
	public CountryDTO getDTO() {
		final Map<String, String> names = new HashMap<String, String>();
		final Collection<I18n> attributes = this.names.values();
		for (final Iterator<I18n> iterator = attributes.iterator(); iterator
				.hasNext();) {
			final I18n i18nKeyValue = iterator.next();
			names.put(i18nKeyValue.getLanguague(), i18nKeyValue.getText());
		}
		final CountryDTO dto = new CountryDTO(id, names, area.getDTO());
		return dto;
	}

	/**
	 * @param area
	 *            the area to set
	 */
	public void setArea(final Area area) {
		this.area = area;
	}

	/**
	 * @return the area
	 */
	public Area getArea() {
		return area;
	}

}
