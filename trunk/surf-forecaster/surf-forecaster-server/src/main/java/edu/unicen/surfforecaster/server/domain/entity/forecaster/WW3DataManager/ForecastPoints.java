/**
 * 
 */
package edu.unicen.surfforecaster.server.domain.entity.forecaster.WW3DataManager;

import java.util.Collection;
import java.util.Iterator;

import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToOne;

import edu.unicen.surfforecaster.server.domain.entity.forecaster.Point;

/**
 * @author esteban
 * 
 */
@Entity
public class ForecastPoints {
	/**
	 * Entity autogenerated id.
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;
	/**
	 * The latest forecast list
	 */
	@OneToOne(fetch = FetchType.EAGER)
	private Collection<Point> points;

	/**
	 * The default constructor.
	 */
	public ForecastPoints() {
		// ORM purpose.
	}

	/**
	 * @return the id
	 */
	public Integer getId() {
		return id;
	}

	/**
	 * Add a point.
	 * 
	 * @param pointToAdd
	 */
	public void addPoint(final Point pointToAdd) {
		// Check that point not already exists
		boolean alreadyExist = false;
		for (final Iterator<Point> i = points.iterator(); i.hasNext();) {
			final Point point = i.next();
			if (point.getLatitude().equals(pointToAdd.getLatitude())
					&& point.getLongitude().equals(pointToAdd.getLongitude())) {
				alreadyExist = true;
			}
		}
		if (!alreadyExist) {
			points.add(pointToAdd);
		}
	}
}
